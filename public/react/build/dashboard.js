"use strict";var IndexResult = React.createClass({ displayName: "IndexResult",  render: function render() {    var rows;    if (this.props.results[0]) {      rows = $.map(this.props.results, function (item, i) {        //var rowValue = JSON.stringify(item, null, 4);        var itemProps = [];        for (var property in item) {          if (item.hasOwnProperty(property)) {            itemProps.push(property);          }        }        var divRows = $.map(itemProps, function (itemProp, j) {          return React.createElement(            "div",            { key: j, className: "info" },            itemProp,            ": ",            item[itemProp]          );        });        var rowId = "row" + i;        var rowRef = "#" + rowId;        var collapsed = i == 0 ? false : true;        var name = React.createElement(          "a",          { href: "http://aka.ms/genevaarg" },          item.id        );        return React.createElement(          "div",          { className: "row", key: i },          React.createElement(            TreeView,            { nodeLabel: name, defaultCollapsed: collapsed },            divRows          )        );      });    }    return React.createElement(      "div",      { className: "panel panel-primary" },      React.createElement(        "div",        { className: "panel-heading" },        React.createElement(          "span",          null,          this.props.index        )      ),      React.createElement(        "div",        { className: "panel-body" },        React.createElement(          "div",          { className: "container" },          rows        )      )    );  }});var SearchBox = React.createClass({  displayName: "SearchBox",  searchClicked: function searchClicked() {    var inputValue = this.myTextInput.value;    if (inputValue) {      this.props.searchLink.requestChange(inputValue);    }  },  // To enable search as typing text in search box add onChange={this.handleQuery}  handleQuery: function handleQuery(evt) {    this.props.searchLink.requestChange(evt.target.value);  },  render: function render() {    var _this = this;    var self = this;    // Check if the key is enter    var handleInput = function handleInput(evt) {      if (evt.keyCode == 13) {        self.searchClicked();      }    };    return React.createElement(      "div",      { className: "container" },      React.createElement(        "div",        { className: "row" },        React.createElement(          "div",          { className: "col-sm-2" },          React.createElement(            "a",            { href: "#", className: "my-tool-tip", "data-toggle": "tooltip", "data-placement": "left", "data-html": "true", title: this.props.searchLink.title },            React.createElement("span", { className: "glyphicon glyphicon-info-sign" })          ),          React.createElement(            "label",            { style: { 'color': "#337ab7" } },            "Search:"          )        ),        React.createElement(          "div",          { className: "col-md-3" },          React.createElement("input", { type: "text", ref: function ref(_ref) {              return _this.myTextInput = _ref;            }, onKeyDown: handleInput, placeholder: this.props.searchLink.title })        )      )    );  }});var SearchResult = React.createClass({ displayName: "SearchResult",  getInitialState: function getInitialState() {    var items = resultsStr;    return {      query: this.props.query,      items: items    };  },  searchClicked: function searchClicked(query) {    if (!query) {      console.log("Graph query is empty");    } else {      console.log("query " + query);      $.ajax({        url: '/searchgraph/?q=' + query,        dataType: 'json',        cache: false,        // If the call to the URL succeeds, extract data from response        success: function (data) {          this.setState({            query: query,            items: data          });        }.bind(this),        error: function (xhr, status, err) {          console.log(query, status, err.toString());        }.bind(this)      });    }  },  render: function render() {    var self = this;    var searchLink = {      value: this.state.query,      requestChange: this.searchClicked,      title: "Enter search text"    };    //var decodeitems = $('<div />').html(this.props.items).text();    var itemsObj = this.state.items;    var rows;    if (itemsObj) {      var goodRows = $.map(itemsObj, function (item) {        if (item.results[0]) return item;      });      if (goodRows[0]) {        rows = $.map(goodRows, function (item, i) {          return React.createElement(            "div",            { className: "row", key: i },            React.createElement(IndexResult, { index: item.index, results: item.results })          );        });      } else {        rows = React.createElement(          "div",          { className: "panel panel-primary" },          React.createElement(            "div",            { className: "panel-body" },            React.createElement(              "h4",              null,              "No results found for ",              this.state.query            )          )        );      }    }    return React.createElement(      "div",      { className: "container" },      React.createElement(        "div",        { className: "row" },        React.createElement(SearchBox, { searchLink: searchLink })      ),      React.createElement("br", null),      rows    );  }});